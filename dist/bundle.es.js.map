{"version":3,"file":"bundle.es.js","sources":["../src/component/primitive.ts","../src/component/any.ts","../src/component/type_interface.ts","../src/component/union_types.ts","../src/component/interfaces.ts","../src/component/array.ts"],"sourcesContent":["/* Boolean */\nconst isBoolean: boolean = Boolean(1)\nconsole.log('Boolean:', {\n  isBoolean\n})\n/* number */\nconst numOne: number = 6;\nconst hex: number = 0xf00d;\nconst binary: number = 0b1010;\nconst octal: number = 0o234;\nconst notNum: number = NaN;\nconst infinity: number = Infinity;\n\nconsole.log('Number:', {\n  numOne,\n  hex,\n  binary,\n  octal,\n  notNum,\n  infinity\n});\n/* String */\nconst names: string = 'yang';\nconst setence: string = `hello, ${names} is ${numOne + 4} now`;\n\nconsole.log('String:', {\n  names,\n  setence\n})\n\n/* 空值Void */\nconst alertTime = () => {\n  // if (process.browser) window.alert(new Date())\n  new Date()\n}\n// const unusable: void = undefined;\n// const unNull: null = null;\n// const undefineds: undefined = undefined;\n// let u: void;\n// let num: number = undefineds;\n\nconsole.log({\n  time: `time: ${alertTime()}`\n  // unusable,\n  // unNull\n});\n\n/* 元组 */\nlet tuple: [string, number] = ['ss', 11];\ntuple[3] = 'sss';\nconsole.log('tuple', {\n  tuple,\n  sub: tuple[0].substr(1),\n  tuple_after: tuple,\n  tuple_5: tuple[5]\n});","/* 任意值（Any）用来表示允许赋值为任意类型 */\nlet anything: any = 'anything';\nanything = 123;\nconsole.log('anything', {\n  anything,\n  name: anything.name,\n  // firstName: anything.setName('yang')\n});\n","let auto = 'string';\nauto = 12; // 默认了String,因而报错\n\nlet autoAny;\nautoAny = 's'; // 默认any\nautoAny = 12;\n\nconsole.log('type_interface:', {\n  auto,\n  auto_typeof: typeof auto,\n  autoAny\n})","\nlet union: string | number\nconsole.log('union_types:', {\n  union: union = 'string',\n  union_num: union = 123456,\n  u_obj: union = { union }\n});\n\nfunction getLength(item: string | number): number {\n  // return item.length; // 报错：当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法\n  // return item.toString() // 报错\n  return Number(item)\n}\nconsole.log('getLength:', {\n  '123': getLength('123'),\n  'num_123': getLength(123)\n});\n","/* 接口 interfaces */\ninterface Person {\n  // readonly id: string,\n  name: string;\n  age?: number;\n  [propName: string]: any; // 任意属性\n}\n\nlet me: Person = {\n  id: '01',\n  name: 'Yang',\n  age: 18\n  // test: 123 // error: 多一些属性也是不允许的, 赋值的时候，变量的形状必须和接口的形状保持一致\n};\n\n// me.id = 2; // [ts] Cannot assign to 'id' because it is a constant or a read-only property.\nconsole.log('interface:', {\n  me\n});\n","/* 数组 */\nlet list: number[] = [1, 2, 3];\n\n// list = ['1', '12']; //  Type 'string' is not assignable to type 'number'\n// list.push('s'); // [ts] Argument of type '\"s\"' is not assignable to parameter of type 'number'.\n\nlet list_union: (number | string)[] = ['1', 2, 3];\n\n// 数组泛型\nlet generic: Array<string> = ['q', 'a', 'z'];\n\n// 用 any 表示数组中允许出现任意类型\nconst any: any[] = ['xx', 1, { obj: 'obj' }]\n\nconsole.log('Array', {\n  list,\n  generic,\n  list_union,\n  any\n});\n"],"names":["isBoolean","Boolean","console","log","numOne","hex","binary","octal","notNum","NaN","infinity","Infinity","names","setence","alertTime","tuple","substr","anything","name","auto","autoAny","union","item","Number","getLength","me","list","list_union","generic","any","obj"],"mappings":"AAAA;AACA,IAAMA,YAAqBC,QAAQ,CAAR,CAA3B;AACAC,QAAQC,GAAR,CAAY,UAAZ,EAAwB;;CAAxB;;AAIA,IAAMC,SAAiB,CAAvB;AACA,IAAMC,MAAc,MAApB;AACA,IAAMC,SAAiB,EAAvB;AACA,IAAMC,QAAgB,GAAtB;AACA,IAAMC,SAAiBC,GAAvB;AACA,IAAMC,WAAmBC,QAAzB;AAEAT,QAAQC,GAAR,CAAY,SAAZ,EAAuB;UAAA;OAAA;UAAA;SAAA;UAAA;;CAAvB;;AASA,IAAMS,QAAgB,MAAtB;AACA,IAAMC,UAAkB,YAAUD,KAAV,SAAA,IAAsBR,SAAS,CAA/B,UAAxB;AAEAF,QAAQC,GAAR,CAAY,SAAZ,EAAuB;SAAA;;CAAvB;;AAMA,IAAMW,YAAY;;;CAAlB;;;;;;AAUAZ,QAAQC,GAAR,CAAY;UACJ,WAASW;CADjB;;AAOA,IAAIC,QAA0B,CAAC,IAAD,EAAO,EAAP,CAA9B;AACAA,MAAM,CAAN,IAAW,KAAX;AACAb,QAAQC,GAAR,CAAY,OAAZ,EAAqB;SAAA;SAEdY,MAAM,CAAN,EAASC,MAAT,CAAgB,CAAhB,CAFc;iBAGND,KAHM;aAIVA,MAAM,CAAN;CAJX;;;AClDA;AACA,IAAIE,WAAgB,UAApB;AACAA,WAAW,GAAX;AACAf,QAAQC,GAAR,CAAY,UAAZ,EAAwB;YAAA;UAEhBc,SAASC;CAFjB;;;ACHA,IAAIC,OAAO,QAAX;AACAA,OAAO,EAAP;AAEA,IAAIC,OAAJ;AACAA,UAAU,GAAV;AACAA,UAAU,EAAV;AAEAlB,QAAQC,GAAR,CAAY,iBAAZ,EAA+B;QAAA;iBAEhB,OAAOgB,IAFS;;CAA/B;;;ACNA,IAAIE,KAAJ;AACAnB,QAAQC,GAAR,CAAY,cAAZ,EAA4B;WACnBkB,QAAQ,QADW;eAEfA,QAAQ,MAFO;WAGnBA,QAAQ,EAAEA,KAAF;CAHjB;AAMA,kBAAA,CAAmBC,IAAnB;;;WAGSC,OAAOD,IAAP,CAAP;;AAEFpB,QAAQC,GAAR,CAAY,YAAZ,EAA0B;WACjBqB,UAAU,KAAV,CADiB;eAEbA,UAAU,GAAV;CAFb;;;ACLA,IAAIC,KAAa;QACX,IADW;UAET,MAFS;SAGV;CAHP;;AAQAvB,QAAQC,GAAR,CAAY,YAAZ,EAA0B;;CAA1B;;;AChBA;AACA,IAAIuB,OAAiB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAArB;;;AAKA,IAAIC,aAAkC,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,CAAtC;;AAGA,IAAIC,UAAyB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA7B;;AAGA,IAAMC,MAAa,CAAC,IAAD,EAAO,CAAP,EAAU,EAAEC,KAAK,KAAP,EAAV,CAAnB;AAEA5B,QAAQC,GAAR,CAAY,OAAZ,EAAqB;QAAA;WAAA;cAAA;;CAArB"}